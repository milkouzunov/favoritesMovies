{"ast":null,"code":"import { call, put, fork, takeEvery, all } from \"redux-saga/effects\";\nimport { addFavoritesSuccess, getFavoritesSuccess, removeFavoritesSuccess } from \"../actions/FavoritesActions\";\nimport { get, add, remove } from \"../../services/favoriteService\";\nimport { ADD_FAVORITES_REQUEST, GET_FAVORITES_REQUEST, REMOVE_FAVORITES_REQUEST } from \"../actionTypes\";\n\nfunction getFavoritesRequestApi() {\n  return get().then(res => {\n    return res.json();\n  });\n}\n\nfunction addFavoriteRequestApi(movie) {\n  return add(movie).then(res => {\n    return res.json();\n  });\n}\n\nfunction removeFavoriteRequestApi(movieId) {\n  return add(movieId).then(res => {\n    if (res.ok) {\n      return res.json();\n    } else {\n      throw {\n        error: ''\n      };\n    }\n  });\n}\n\nfunction* getFavorites() {\n  try {\n    const response = yield call(getFavoritesRequestApi);\n    yield put(getFavoritesSuccess(response));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* addFavorite(action) {\n  try {\n    const response = yield call(addFavoriteRequestApi(action.movie));\n    yield put(addFavoritesSuccess(response));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* removeFavorite(action) {\n  try {\n    const response = yield call(removeFavoriteRequestApi(action.movieId));\n    yield put(removeFavoritesSuccess(response));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* getFavoritesGenerator() {\n  yield takeEvery(GET_FAVORITES_REQUEST, getFavorites);\n}\n\nfunction* addFavoriteGenerator() {\n  yield takeEvery(ADD_FAVORITES_REQUEST, addFavorite);\n}\n\nfunction* removeFavoriteGenerator() {\n  yield takeEvery(REMOVE_FAVORITES_REQUEST, removeFavorite);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(getFavoritesGenerator), fork(addFavoriteGenerator), fork(removeFavoriteGenerator)]);\n}","map":{"version":3,"sources":["/media/uzunov/78604C4A604C1174/favorites-movies/src/appRedux/sagas/FavoritesSaga.js"],"names":["call","put","fork","takeEvery","all","addFavoritesSuccess","getFavoritesSuccess","removeFavoritesSuccess","get","add","remove","ADD_FAVORITES_REQUEST","GET_FAVORITES_REQUEST","REMOVE_FAVORITES_REQUEST","getFavoritesRequestApi","then","res","json","addFavoriteRequestApi","movie","removeFavoriteRequestApi","movieId","ok","error","getFavorites","response","console","log","addFavorite","action","removeFavorite","getFavoritesGenerator","addFavoriteGenerator","removeFavoriteGenerator","rootSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,IAApB,EAA0BC,SAA1B,EAAqCC,GAArC,QAAgD,oBAAhD;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,sBAHF,QAIO,6BAJP;AAMA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,MAAnB,QAAiC,gCAAjC;AAEA,SAASC,qBAAT,EAAgCC,qBAAhC,EAAuDC,wBAAvD,QAAuF,gBAAvF;;AAEA,SAASC,sBAAT,GAAkC;AAChC,SAAON,GAAG,GAAGO,IAAN,CAAYC,GAAD,IAAS;AACzB,WAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,GAFM,CAAP;AAGD;;AAED,SAASC,qBAAT,CAA+BC,KAA/B,EAAsC;AACpC,SAAOV,GAAG,CAACU,KAAD,CAAH,CAAWJ,IAAX,CAAiBC,GAAD,IAAS;AAC9B,WAAOA,GAAG,CAACC,IAAJ,EAAP;AACD,GAFM,CAAP;AAGD;;AAED,SAASG,wBAAT,CAAkCC,OAAlC,EAA2C;AACzC,SAAOZ,GAAG,CAACY,OAAD,CAAH,CAAaN,IAAb,CAAmBC,GAAD,IAAS;AAChC,QAAGA,GAAG,CAACM,EAAP,EAAW;AACT,aAAON,GAAG,CAACC,IAAJ,EAAP;AACD,KAFD,MAEO;AACL,YAAM;AAACM,QAAAA,KAAK,EAAE;AAAR,OAAN;AACD;AACF,GANM,CAAP;AAOD;;AAED,UAAUC,YAAV,GAAyB;AACvB,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMzB,IAAI,CAACc,sBAAD,CAA3B;AACA,UAAMb,GAAG,CAACK,mBAAmB,CAACmB,QAAD,CAApB,CAAT;AACD,GAHD,CAGE,OAAOF,KAAP,EAAc;AACdG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACD;AACF;;AAED,UAAUK,WAAV,CAAsBC,MAAtB,EAA8B;AAC5B,MAAI;AACF,UAAMJ,QAAQ,GAAG,MAAMzB,IAAI,CAACkB,qBAAqB,CAACW,MAAM,CAACV,KAAR,CAAtB,CAA3B;AACA,UAAMlB,GAAG,CAACI,mBAAmB,CAACoB,QAAD,CAApB,CAAT;AACD,GAHD,CAGE,OAAOF,KAAP,EAAc;AACdG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACD;AACF;;AAED,UAAUO,cAAV,CAAyBD,MAAzB,EAAiC;AAC/B,MAAI;AACF,UAAMJ,QAAQ,GAAG,MAAMzB,IAAI,CAACoB,wBAAwB,CAACS,MAAM,CAACR,OAAR,CAAzB,CAA3B;AACA,UAAMpB,GAAG,CAACM,sBAAsB,CAACkB,QAAD,CAAvB,CAAT;AACD,GAHD,CAGE,OAAOF,KAAP,EAAc;AACdG,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACD;AACF;;AAED,UAAUQ,qBAAV,GAAkC;AAC9B,QAAM5B,SAAS,CAACS,qBAAD,EAAwBY,YAAxB,CAAf;AACH;;AAED,UAAUQ,oBAAV,GAAiC;AAC7B,QAAM7B,SAAS,CAACQ,qBAAD,EAAwBiB,WAAxB,CAAf;AACH;;AAED,UAAUK,uBAAV,GAAoC;AAChC,QAAM9B,SAAS,CAACU,wBAAD,EAA2BiB,cAA3B,CAAf;AACH;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAM9B,GAAG,CAAC,CACNF,IAAI,CAAC6B,qBAAD,CADE,EAEN7B,IAAI,CAAC8B,oBAAD,CAFE,EAGN9B,IAAI,CAAC+B,uBAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { call, put, fork, takeEvery, all } from \"redux-saga/effects\";\nimport {\n  addFavoritesSuccess,\n  getFavoritesSuccess,\n  removeFavoritesSuccess,\n} from \"../actions/FavoritesActions\";\n\nimport { get, add, remove } from \"../../services/favoriteService\";\n\nimport { ADD_FAVORITES_REQUEST, GET_FAVORITES_REQUEST, REMOVE_FAVORITES_REQUEST } from \"../actionTypes\";\n\nfunction getFavoritesRequestApi() {\n  return get().then((res) => {\n    return res.json();\n  });\n}\n\nfunction addFavoriteRequestApi(movie) {\n  return add(movie).then((res) => {\n    return res.json();\n  });\n}\n\nfunction removeFavoriteRequestApi(movieId) {\n  return add(movieId).then((res) => {\n    if(res.ok) {\n      return res.json();\n    } else {\n      throw {error: ''}\n    }\n  });\n}\n\nfunction* getFavorites() {\n  try {\n    const response = yield call(getFavoritesRequestApi);\n    yield put(getFavoritesSuccess(response));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* addFavorite(action) {\n  try {\n    const response = yield call(addFavoriteRequestApi(action.movie));\n    yield put(addFavoritesSuccess(response));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* removeFavorite(action) {\n  try {\n    const response = yield call(removeFavoriteRequestApi(action.movieId));\n    yield put(removeFavoritesSuccess(response));\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction* getFavoritesGenerator() {\n    yield takeEvery(GET_FAVORITES_REQUEST, getFavorites);\n}\n\nfunction* addFavoriteGenerator() {\n    yield takeEvery(ADD_FAVORITES_REQUEST, addFavorite);\n}\n\nfunction* removeFavoriteGenerator() {\n    yield takeEvery(REMOVE_FAVORITES_REQUEST, removeFavorite)\n}\n\nexport default function* rootSaga() {\n    yield all([\n        fork(getFavoritesGenerator),\n        fork(addFavoriteGenerator),\n        fork(removeFavoriteGenerator)\n    ])\n}"]},"metadata":{},"sourceType":"module"}